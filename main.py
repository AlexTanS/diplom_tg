import logging
import asyncio
from typing import Union
from aiogram import Dispatcher, Bot
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import aiohttp

# @AlexTUrban_bot
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

api_address = {
    "list_of_services": "http://127.0.0.1:8000/api/list_of_services/",
    "service": "http://127.0.0.1:8000/api/service/",
}

bot = Bot(token="8188076440:AAE1v-T8PAUJZVfCTa9nQR-0bvHnZiYHXzA")
dp = Dispatcher(bot, storage=MemoryStorage())

kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —É—Å–ª—É–≥—É"), KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")],
    ],
    resize_keyboard=True
)


# kb_inline = InlineKeyboardMarkup(
#     inline_keyboard=[
#         [InlineKeyboardButton(text="–û–±–µ–¥", callback_data="obed"),
#          InlineKeyboardButton(text="–ò–Ω—Ç–µ—Ä–Ω–µ—Ç", callback_data="wifi"),
#          InlineKeyboardButton(text="–ö–∏–Ω–æ", callback_data="kino"), ],
#     ]
# )


async def fetch_json(session: aiohttp.ClientSession, url: str) -> dict:
    async with session.get(url) as response:
        return await response.json()


async def post_to_api(session: aiohttp.ClientSession, url: str, payload: dict) -> Union[dict, None]:
    async with session.post(url, json=payload) as response:
        if response.status == 200:
            return await response.json()
        else:
            logging.error(f"Request failed with status code: {response.status}")
            return None


async def get_list_services():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥"""
    list_services = []
    async with aiohttp.ClientSession() as session:
        data = await fetch_json(session, api_address["list_of_services"])
        for d in data:
            list_services.append(d["name"].title())
    return list_services


services = get_list_services()  # –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã


class UserState(StatesGroup):
    choosing = State()  # –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤
    id_ticket = State()  # –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞
    password = State()  # –ø–∞—Ä–æ–ª—å —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏


def create_checkbox_keyboard():
    """–ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏"""
    inline_kb = InlineKeyboardMarkup(row_width=1)
    for s in services:
        checked = "üî≤" if s not in get_selected_services() else "‚úÖ"
        callback_data = f"–£—Å–ª—É–≥–∞: {s}"
        inline_kb.insert(InlineKeyboardButton(text=f"{checked} {s}", callback_data=callback_data))
    inline_kb.row(InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data="next"))
    return inline_kb


def get_selected_services():
    """–°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π"""
    return dp.current_state().get_data().get("selected_options", [])


async def update_selected_options(option):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π"""
    selected_services = get_selected_services()
    if option in selected_services:
        selected_services.remove(option)
    else:
        selected_services.append(option)
    await dp.current_state().update_data(selected_options=selected_services)


@dp.message_handler(commands=["start"])
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ–ø—É—Å–ª—É–≥–∏", reply_markup=kb)


@dp.message_handler(text="–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —É—Å–ª—É–≥—É")
async def set_id_ticket(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–≥–æ –±–∏–ª–µ—Ç–∞:")
    await UserState.id_ticket.set()


@dp.message_handler(state=UserState.id_ticket)
async def set_password(message: Message, state):
    await state.update_data(id_ticket=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏:")
    await UserState.password.set()


@dp.message_handler(state=UserState.password)
async def end_services(message: Message, state):
    await state.update_data(password=message.text)

    payload = dict()
    data = await state.get_data()
    payload["id_ticket"] = str(data["id_ticket"])
    payload["password"] = str(data["password"])

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ post –∑–∞–ø—Ä–æ—Å–∞
    async with aiohttp.ClientSession() as session:
        data = await post_to_api(session, api_address["service"], payload)

    if data is not None:  # –ø–æ–ª—É—á–∞—é —Å–ª–æ–≤–∞—Ä—å —Å –æ—Ç–≤–µ—Ç–æ–º {'test': 'test', 'test2': 'test2'}
        # await message.answer(str(data))
        pass
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

    await message.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –°–î–ï–õ–ê–¢–¨", reply_markup=kb_inline)

    await state.finish()


@dp.message_handler(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def info(message: Message, state: FSMContext):
    list_services = []
    await message.answer(
        "–î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è —É—Å–ª—É–≥–∏ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–∞—Ä–æ–ª—å –æ—Ç —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∏ –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞."
        "–£—Å–ª—É–≥–∏ –≤–∫–ª—é—á–∞—é—Ç –≤ —Å–µ–±—è —Å–ª–µ–¥—É—é—â–µ–µ:")

    async with aiohttp.ClientSession() as session:
        data = await fetch_json(session, api_address["list_of_services"])
        for d in data:
            list_services.append([d["name"], d["price"]])

    for s in list_services:
        await message.answer(f"- {s[0]}, —Å—Ç–æ–∏–º–æ—Å—Ç—å: {s[1]}")


@dp.message_handler()
async def start(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ")


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
